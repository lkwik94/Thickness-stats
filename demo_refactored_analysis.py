#!/usr/bin/env python3
"""
Demonstration of the refactored thickness analysis

This script shows how the refactored code eliminates repetition
and provides a clean, maintainable solution.
"""

import os
import sys
from thickness_analysis import analyze_thickness_data, create_summary_analysis

def demo_single_analysis():
    """
    Demonstrates how to run a single analysis with the refactored code
    """
    print("üîç D√âMONSTRATION - ANALYSE UNIQUE")
    print("=" * 50)
    
    # Configuration des fichiers
    csv_file_1 = './CSV/2-apres/thickness_ENG.csv'
    csv_file_2 = './CSV/10-restart apres modif recette a la main/thickness.csv'
    
    # V√©rification des fichiers
    if not os.path.exists(csv_file_1) or not os.path.exists(csv_file_2):
        print("‚ùå Fichiers CSV non trouv√©s pour la d√©monstration")
        return
    
    # Analyse d'un seul capteur (exemple: Capteur 1)
    print("\nüìä Analyse du Capteur 1 uniquement:")
    result = analyze_thickness_data(
        csv_file_1=csv_file_1,
        csv_file_2=csv_file_2,
        column_index=1,  # 2√®me colonne
        min_columns=2,
        title='TRSF_ThicknessBottles[1] (Capteur 1)',
        ylabel='TRSF_ThicknessBottles[1]',
        is_percentage=False
    )
    
    print(f"\n‚úÖ Analyse termin√©e pour {result['title']}")
    print(f"   - Moyenne avant: {result['stats_avant']['Moyenne']:.3f}")
    print(f"   - Moyenne apr√®s: {result['stats_apres']['Moyenne']:.3f}")
    print(f"   - Diff√©rence: {result['stats_apres']['Moyenne'] - result['stats_avant']['Moyenne']:+.3f}")

def demo_multiple_analyses():
    """
    Demonstrates how to run multiple analyses efficiently
    """
    print("\n\nüîç D√âMONSTRATION - ANALYSES MULTIPLES")
    print("=" * 50)
    
    # Configuration des fichiers
    csv_file_1 = './CSV/2-apres/thickness_ENG.csv'
    csv_file_2 = './CSV/10-restart apres modif recette a la main/thickness.csv'
    
    # V√©rification des fichiers
    if not os.path.exists(csv_file_1) or not os.path.exists(csv_file_2):
        print("‚ùå Fichiers CSV non trouv√©s pour la d√©monstration")
        return
    
    # Configuration pour toutes les analyses
    analyses_config = [
        {
            'column_index': -1,  # Derni√®re colonne
            'min_columns': 12,
            'title': 'TRSF_ThicknessBottlePerc',
            'ylabel': 'Pourcentage de bouteilles lues (%)',
            'is_percentage': True
        },
        {
            'column_index': 1,  # 2√®me colonne
            'min_columns': 2,
            'title': 'TRSF_ThicknessBottles[1] (Capteur 1)',
            'ylabel': 'TRSF_ThicknessBottles[1]',
            'is_percentage': False
        },
        {
            'column_index': 3,  # 4√®me colonne
            'min_columns': 4,
            'title': 'TRSF_ThicknessBottles[2] (Capteur 2)',
            'ylabel': 'TRSF_ThicknessBottles[2]',
            'is_percentage': False
        },
        {
            'column_index': 5,  # 6√®me colonne
            'min_columns': 6,
            'title': 'TRSF_ThicknessBottles[3] (Capteur 3)',
            'ylabel': 'TRSF_ThicknessBottles[3]',
            'is_percentage': False
        }
    ]
    
    print("üìä Ex√©cution de toutes les analyses avec une seule boucle:")
    
    results = []
    for i, config in enumerate(analyses_config, 1):
        print(f"\n   {i}/4: {config['title']}")
        
        # Une seule fonction fait tout le travail !
        result = analyze_thickness_data(
            csv_file_1=csv_file_1,
            csv_file_2=csv_file_2,
            **config  # Unpacking de la configuration
        )
        
        results.append(result)
        print(f"   ‚úÖ Termin√© - Œî moyenne: {result['stats_apres']['Moyenne'] - result['stats_avant']['Moyenne']:+.2f}")
    
    # Analyse r√©sum√©e
    print(f"\nüìà Cr√©ation du r√©sum√© comparatif...")
    summary = create_summary_analysis(csv_file_1, csv_file_2, analyses_config)
    
    print(f"\nüéâ {len(results)} analyses termin√©es avec succ√®s!")
    return results, summary

def show_code_comparison():
    """
    Shows the difference between old and new approach
    """
    print("\n\nüìù COMPARAISON DE CODE")
    print("=" * 50)
    
    print("‚ùå ANCIEN CODE (r√©p√©titif):")
    print("""
    # Pour chaque capteur, il fallait:
    def extract_thickness_sensor1(file_path):
        # ... 20+ lignes de code identique
        thickness_val = float(values[1])  # Seule diff√©rence: index
        # ... reste identique
    
    def extract_thickness_sensor2(file_path):
        # ... 20+ lignes de code identique  
        thickness_val = float(values[3])  # Seule diff√©rence: index
        # ... reste identique
    
    # + 2 autres fonctions similaires
    # + 4 blocs d'analyse identiques de 50+ lignes chacun
    # = ~400 lignes de code r√©p√©titif !
    """)
    
    print("\n‚úÖ NOUVEAU CODE (g√©n√©rique):")
    print("""
    # Une seule fonction g√©n√©rique:
    def extract_thickness_data(file_path, column_index, min_columns):
        # ... logique r√©utilisable
        thickness_val = float(values[column_index])  # Param√©trable !
        # ... 
    
    def analyze_thickness_data(csv_file_1, csv_file_2, column_index, ...):
        # Une fonction qui fait tout !
        
    # Usage simple:
    for config in analyses_config:
        analyze_thickness_data(**config)
    
    # = ~200 lignes de code r√©utilisable + configuration
    # = 50% de r√©duction de code !
    """)

def main():
    """
    Main demonstration function
    """
    print("üöÄ D√âMONSTRATION DU CODE REFACTORIS√â")
    print("=" * 60)
    print("Ce script montre comment le code r√©p√©titif a √©t√© √©limin√©")
    print("et remplac√© par des fonctions g√©n√©riques r√©utilisables.")
    print("=" * 60)
    
    # D√©monstration du code
    show_code_comparison()
    
    # D√©monstration d'une analyse unique
    demo_single_analysis()
    
    # D√©monstration d'analyses multiples
    demo_multiple_analyses()
    
    print("\n\nüéØ AVANTAGES DU CODE REFACTORIS√â:")
    print("=" * 50)
    print("‚úÖ R√©duction de ~50% du code")
    print("‚úÖ √âlimination de la duplication")
    print("‚úÖ Maintenance plus facile")
    print("‚úÖ Ajout de nouvelles analyses simplifi√©")
    print("‚úÖ Moins d'erreurs potentielles")
    print("‚úÖ Code plus lisible et organis√©")
    print("‚úÖ Fonctions r√©utilisables")
    print("‚úÖ Configuration centralis√©e")

if __name__ == "__main__":
    main()